// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator erd {
  provider = "prisma-erd-generator"
  output   = "./diagram/erd.svg"
}

enum Discount {
  PERCENTAGE
  VALUE
}

enum Status {
  PENDING
  COMPLETED
}

enum Transaction {
  PURCHASE
  REDEMPTION
  BONUS
  REFERRAL
}

model User {
  id                 String              @id @default(uuid())
  name               String
  email              String              @unique
  password           String?
  phone              String
  cep                String
  points             Int
  createdAt          DateTime            @default(now())
  rank               Int
  loyaltyCard        LoyaltyCard?
  purchases          Purchase[]
  notifications      UserNotification[]
  referralSent       ReferralProgram[]   @relation("Referrer")
  referralReceived   ReferralProgram?    @relation("Referee")
  logs               Log[]
}

model Purchase {
  id           String    @id @default(uuid())
  userId       String
  user         User      @relation(fields: [userId], references: [id])
  amount       Float
  date         DateTime
  pointsEarned Int
}

model LoyaltyCard {
  id              String   @id @default(uuid())
  userId          String   @unique
  user            User     @relation(fields: [userId], references: [id])
  category        String
  points          Int
  expirationDate  DateTime
}

model Reward {
  id                String   @id @default(uuid())
  name              String
  requiredPoints    Int
  description       String
  availableQuantity Int
}

model Ranking {
  id       String   @id @default(uuid())
  criteria String
  month    DateTime
  // Optionally: you could model a relation to a list of ranked users
}

model DiscountCoupon {
  id              String    @id @default(uuid())
  type            Discount
  discount        Float
  expirationDate  DateTime
}

model UserNotification {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  message   String
  sentDate  DateTime
  read      Boolean  @default(false)
}

model Promotion {
  id           String    @id @default(uuid())
  name         String
  description  String
  bonusPoints  Int
  startDate    DateTime
  endDate      DateTime
}

model ReferralProgram {
  id               String   @id @default(uuid())
  referreringUserId String
  refereeUserId     String   @unique
  referreringUser   User     @relation("Referrer", fields: [referreringUserId], references: [id])
  refereeUser       User     @relation("Referee", fields: [refereeUserId], references: [id])
  rewardPoints      Int
  status            Status
}

model Log {
  id           String      @id @default(uuid())
  transaction  Transaction
  userId       String
  user         User        @relation(fields: [userId], references: [id])
  amount       Float
  date         DateTime
}

